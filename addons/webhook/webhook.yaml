apiVersion: v1
kind: ConfigMap
metadata:
  name: webhook
  namespace: openshift-pipelines-operator
data:
  webhook.yaml: |
    apiVersion: serving.knative.dev/v1alpha1
    kind: Service
    metadata:
      name: webhooks-extension-sink
      labels:
        app: webhooks-extension-sink
    spec:
      template:
        spec:
          containers:
          - image: "gcr.io/tekton-nightly/sink:latest"
            imagePullPolicy: Always
            ports:
            - containerPort: 8080
            livenessProbe:
              httpGet:
                path: /liveness
            readinessProbe:
              httpGet:
                path: /readiness
            env:
            # PORT var resolved via containerPort by Knative
            # TODO: Find better way to provide INSTALL_NAMESPACE since Knative does not support Downward API
            - name: INSTALLED_NAMESPACE
              value: "default"
    ---
    # ------------------- webhooks-extention deplpyment ------------------- #
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: webhooks-extension
      labels:
        app: webhooks-extension
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: webhooks-extension
      template:
        metadata:
          labels:
            app: webhooks-extension
        spec:
          containers:
            - name: webhooks-extension
              image: "gcr.io/tekton-nightly/extension:latest"
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
              livenessProbe:
                httpGet:
                  path: /liveness
                  port: 8080
              readinessProbe:
                httpGet:
                  path: /readiness
                  port: 8080
              env:
              - name: PORT
                value: "8080"
              - name: INSTALLED_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: DOCKER_REGISTRY_LOCATION
                value: DOCKER_REPO
              - name: WEB_RESOURCES_DIR
                value: web
    ---
    # ------------------- webhooks-extention service ------------------- #
    apiVersion: v1
    kind: Service
    metadata:
      name: webhooks-extension
      labels:
        app: webhooks-extension
        tekton-dashboard-extension: "true"
      annotations:
        tekton-dashboard-display-name: Webhooks
        tekton-dashboard-endpoints: "webhooks.web"
        tekton-dashboard-bundle-location: "web/extension.1d5b4954.js"
    spec:
      type: NodePort
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        app: webhooks-extension
    ---
    # ------------------- ClusterRole overrides ------------------- #
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tekton-pipelines-admin
    rules:
    - apiGroups:
      - ""
      resources:
      - pods
      - namespaces
      - secrets
      - events
      - serviceaccounts
      - configmaps
      - persistentvolumeclaims
      - services
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - apps
      resources:
      - deployments/finalizers
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - admissionregistration.k8s.io
      resources:
      - mutatingwebhookconfigurations
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - tekton.dev
      resources:
      - tasks
      - clustertasks
      - taskruns
      - pipelines
      - pipelineruns
      - pipelineresources
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - tekton.dev
      resources:
      - taskruns/finalizers
      - pipelineruns/finalizers
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - tekton.dev
      resources:
      - tasks/status
      - clustertasks/status
      - taskruns/status
      - pipelines/status
      - pipelineruns/status
      - pipelineresources/status
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
    - apiGroups:
      - policy
      resourceNames:
      - tekton-pipelines
      resources:
      - podsecuritypolicies
      verbs:
      - use
    - apiGroups:
      - serving.knative.dev
      resources:
      - services
      verbs:
      - get
      - list
      - create
      - update
      - delete
      - patch
      - watch
